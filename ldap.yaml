---
- name: Setup LDAP Servers
  hosts: ldapservers
  vars_files:
    - ./vars/variables.yaml
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: dist
        state: latest

    - name: Install ldap packages
      apt:
        name:
          - slapd
          - ldap-utils
          - debconf-utils
          - python3-ldap
        state: present

    - name: Ensure slapd is running and enabled
      service:
        name: slapd
        state: started
        enabled: yes
    
    - name: Configure LDAP Admin password
      ansible.builtin.debconf:
        name: password1
        question: slapd/password1
        value: ldap_password
        vtype: password
      no_log: yes
    
    - name: Configure LDAP Admin password (2)
      ansible.builtin.debconf:
        name: password2
        question: slapd/password2
        value: ldap_password
        vtype: password
      no_log: yes
    
    - name: Move the old database
      ansible.builtin.debconf:
        name: move_old_database
        question: slapd/move_old_database
        value: true
        vtype: boolean
    
    - name: Do not skip configuration
      ansible.builtin.debconf:
        name: no_configuration
        question: slapd/no_configuration
        value: false
        vtype: boolean

    - name: Do not purge the database
      ansible.builtin.debconf:
        name: purge_database
        question: slapd/purge_database
        value: true
        vtype: boolean
  
    - name: Configure the organization
      ansible.builtin.debconf:
        name: Organization
        question: shared/organization
        value: domain
        vtype: string

    - name: Configure the Domain
      ansible.builtin.debconf:
        name: Domain
        question: slapd/domain
        value: "{{ domain + '.' + tld }}"
        vtype: string
    
    - name: Make debconf changes active
      ansible.builtin.command:
        cmd: "dpkg-reconfigure slapd"
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Create Parent entry for People
      community.general.ldap_entry:
        dn: "ou=People,dc={{ domain }},dc={{ tld }}"
        objectClass: organizationalUnit
        server_uri: ldap://localhost
        bind_dn: "cn=admin,dc={{ domain }},dc={{ tld }}"
        bind_pw: ldap_password
    
    - name: Create Parent entry for Groups
      community.general.ldap_entry:
        dn: "ou=Groups,dc={{ domain }},dc={{ tld }}"
        objectClass: organizationalUnit
        server_uri: ldap://localhost
        bind_dn: "cn=admin,dc={{ domain }},dc={{ tld }}"
        bind_pw: ldap_password
    
    - name: Create Groups
      community.general.ldap_entry:
        dn: "cn={{ item.name }},ou=Groups,dc={{ domain }},dc={{ tld }}"
        objectClass: posixGroup
        attributes:
          cn: item.name
          gidNumber : "{{item.gidNumber | int }}"
        server_uri: ldap://localhost
        bind_dn: "cn=admin,dc={{ domain }},dc={{ tld }}"
        bind_pw: ldap_password
      loop: "{{ ldapGroups }}"
    
    - name: Create Users
      community.general.ldap_entry:
        dn: "uid={{ item.uid }},ou=People,dc={{ domain }},dc={{ tld }}"
        objectClass:
          - inetOrgPerson
          - posixAccount
          - shadowAccount
        attributes:
          uid: "{{ item.uid }}"
          sn: "{{ item.surname }}"
          givenName: "{{ item.firstname }}"
          cn: "{{ item.firstname }} {{ item.surname }}"
          uidNumber: "{{ uidNumber + index | int }}"
          gidNumber: "{{ item.gidNumber | int }}"
          userPassword: "{CRYPT}x"
          gecos: "{{ item.firstname }} {{ item.surname }}"
          loginShell: /bin/bash
          homeDirectory: "/home/{{ item.uid }}"
        server_uri: ldap://localhost
        bind_dn: "cn=admin,dc={{ domain }},dc={{ tld }}"
        bind_pw: ldap_password
      loop: "{{ ldapUsers }}"
      loop_control:
        index_var: index
